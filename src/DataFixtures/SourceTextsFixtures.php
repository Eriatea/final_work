<?php

namespace App\DataFixtures;

use App\Entity\SourceTexts;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use phpDocumentor\Reflection\Types\Self_;

class SourceTextsFixtures extends BaseFixtures
{
    public const INTRO_PHRASES = array(
        'В этой статье мы расскажем вам о $plural.',
        'Вы хотите узнать больше о $plural? Тогда эта статья для вас.',
        'Сегодня мы поговорим о $plural и их особенностях.',
        'Если вы интересуетесь $genitive, то вы попали по адресу. В этой статье мы поделимся с вами полезной информацией о $plural.'
    );

    private const CONCLUSION_PHRASES = array(
        'Надеемся, что эта статья помогла вам узнать больше о $plural. Спасибо за внимание!',
        'Вот и все, что мы хотели рассказать вам о $plural. Если у вас есть вопросы или пожелания, пишите в комментариях.',
        'Это была статья о $plural. Мы надеемся, что она была полезной и интересной для вас. До новых встреч!',
        'Мы рассмотрели основные аспекты $genitive. Если вам понравилась эта статья, поделитесь ей с друзьями в социальных сетях.'
    );

    private const TOPICS = array(
        'Основные принципы и концепции PHP',
        'Синтаксис и структура PHP-кода',
        'Встроенные функции и переменные PHP',
        'История и происхождение $genitive',
        'Польза и вред $genitive для здоровья',
        'Способы приготовления и рецепты с $plural',
        'Советы по выбору и хранению $genitive',
        'Интересные факты и курьезы о $plural'
    );

    private const TRANSLATIONS = array(
        'Перейдем к следующему вопросу.',
        'Теперь рассмотрим другой аспект $genitive.',
        'Продолжим наш разговор о $plural.',
        'Кроме того, важно знать, что...',
        'Еще один интересный факт о $plural заключается в том, что...'
    );

    private const SENTENCES = array(
        '$plural имеют древнюю историю, которая уходит корнями в далекое прошлое.',
        'Первые упоминания о $genitive относятся к 1000 году до нашей эры.',
        '$plural были распространены в разных культурах и цивилизациях.',
        '$plural приобрели свое современное название благодаря в 16 веке.',
        'Сегодня $plural являются одними из самых популярных и востребованных продуктов в мире.',
        '$plural обладают рядом полезных свойств, которые способствуют улучшению здоровья и благополучия человека.',
        '$plural содержат много витаминов, минералов, антиоксидантов и других веществ, которые укрепляют иммунитет, повышают энергию, улучшают настроение и защищают от болезней.',
        '$plural также помогают регулировать вес, улучшать пищеварение, очищать кровь и организм от токсинов, укреплять кости и зубы, улучшать зрение и слух.',
        'Однако $plural могут быть вредны для здоровья, если употреблять их в избытке или неправильно.',
        '$plural могут вызывать аллергию, раздражение желудка, головную боль, бессонницу, повышение давления и сахара в крови, а также другие нежелательные эффекты.',
        '$plural можно приготовить разными способами, в зависимости от личных предпочтений и доступности ингредиентов.',
        'Один из самых простых и быстрых способов приготовления $genitive - это варка. Для этого нужно поместить $plural в кастрюлю с водой, довести до кипения и варить на среднем огне 15 минут.',
        'Еще один популярный способ приготовления $genitive - это жарка. Для этого нужно разогреть сковороду с маслом, добавить $plural и жарить на сильном огне, периодически перемешивая, 10 минут.',
        'Кроме того, $plural можно запекать в духовке, тушить в собственном соку, солить, мариновать, сушить, смешивать с другими продуктами и создавать разнообразные блюда.',
        'Например, вы можете приготовить салат из $plural, сыра, орехов и зелени, заправленный медом и лимонным соком. Это легкий и вкусный салат, который подойдет для завтрака или перекуса. Или вы можете приготовить пирог с $plural, яйцами, сметаной и сахаром. Это ароматный и сладкий пирог, который порадует ваших близких и гостей. Вы можете найти больше рецептов с $plural на сайте [Кулинарная книга].',
        'Чтобы правильно выбрать $plural, нужно обратить внимание на их внешний вид, запах, цвет и текстуру.',
        '$plural должны быть целыми, без повреждений, пятен, гнили и плесени. Они должны иметь приятный и свежий запах, без посторонних запахов. Они должны иметь яркий и насыщенный цвет, без бледности и тусклости. Они должны быть упругими и твердыми на ощупь, без мягкости и вялости.',
        'Чтобы правильно хранить $plural, нужно соблюдать определенные условия температуры, влажности и света.',
        '$plural лучше хранить в холодильнике, в специальных контейнерах или пакетах с отверстиями для вентиляции. Температура хранения должна быть от 10 до 20 градусов Цельсия, влажность - от 90 до 100 процентов, свет - темный или слабый. Срок хранения $genitive составляет от  7 до 15 дней, в зависимости от сорта и качества.',
        'Чтобы продлить срок хранения $genitive, можно использовать различные методы консервации, такие как замораживание, сушка, соление, маринование, вяление и т.д.',
        '$plural - это не только вкусный и полезный продукт, но и источник многих интересных фактов и курьезов.',
        'Вы знали, что $plural являются одними из самых древних культурных растений, которые выращивали еще в 5000) году до нашей эры?',
        'Вы знали, что $plural имеют свои собственные праздники и фестивали, которые проводятся в разных странах и городах мира?',
        'Вы знали, что $plural могут быть не только красными, желтыми, зелеными, оранжевыми и фиолетовыми, но и синими, черными, белыми и даже розовыми?',
        'Вы знали, что $plural могут влиять на настроение, эмоции и поведение человека, в зависимости от их цвета, формы и аромата?',
        'PHP - это скриптовый язык программирования, который используется для создания динамических веб-страниц и веб-приложений.',
        'PHP работает на стороне сервера, то есть код PHP выполняется на сервере, а не на клиенте (браузере). Результатом выполнения кода PHP является HTML-код, который отправляется клиенту и отображается в браузере.',
        'PHP поддерживает множество парадигм программирования, таких как процедурное, объектно-ориентированное, функциональное и смешанное. PHP также поддерживает множество концепций, таких как переменные, константы, операторы, выражения, условия, циклы, функции, классы, объекты, наследование, полиморфизм, абстракция, интерфейсы, трейты, пространства имен, исключения и т.д.',
        'PHP имеет простой и гибкий синтаксис, который позволяет легко и быстро писать код. PHP-код может быть вставлен в HTML-код или наоборот, а также может быть в отдельном файле с расширением .php. PHP-код начинается и заканчивается специальными тегами <?php и ?>, которые указывают, что это код PHP, а не HTML.',
        'PHP имеет богатую и мощную стандартную библиотеку, которая предоставляет множество встроенных функций и констант для работы с различными аспектами веб-разработки, такими как работа с базами данных, файлами, датами, строками, массивами, регулярными выражениями, сессиями, куками, формами, почтой, XML, JSON и т.д.',
        'Синтаксис PHP основан на синтаксисе языков C и Perl, поэтому он легко изучается для тех, кто знаком с этими языками.',
        'PHP-код может быть вставлен в HTML-код или находиться в отдельном файле с расширением .php. Для того, чтобы PHP-код был распознан и выполнен, он должен быть заключен в специальные теги <?php и ?>.',
        'PHP-код состоит из инструкций, которые заканчиваются точкой с запятой (;). Инструкции могут быть объединены в блоки, которые заключаются в фигурные скобки ({}). Блоки могут быть вложены друг в друга.',
        'PHP поддерживает комментарии, которые используются для пояснения кода или его временного отключения. Комментарии могут быть однострочными, которые начинаются с двух косых черт (//), или многострочными, которые заключаются в звездочки и косые черты (/* и */).',
        'PHP чувствителен к регистру, то есть он различает строчные и прописные буквы. Это касается имен переменных, функций, классов и констант. Однако ключевые слова, операторы и типы данных не чувствительны к регистру.',
        'PHP имеет множество встроенных функций, которые предоставляют готовые решения для различных задач, таких как работа со строками, массивами, датами, математикой, файлами, сетью и т.д.',
        'Встроенные функции PHP имеют определенное имя, которое следует за круглыми скобками, в которых указываются аргументы, если они есть. Например, функция echo() выводит на экран значение своего аргумента.',
        'PHP также имеет множество встроенных переменных, которые хранят разную информацию о сервере, клиенте, сессии, запросе и т.д. Встроенные переменные PHP начинаются со знака доллара ($) и имеют специальные имена.',
        'Встроенные функции и переменные PHP облегчают разработку веб-приложений, так как они позволяют выполнять многие операции без написания дополнительного кода. Однако, для использования встроенных функций и переменных PHP необходимо знать их синтаксис, аргументы, возвращаемые значения и возможные ошибки.',
        'Для того, чтобы узнать больше о встроенных функциях и переменных PHP, вы можете обратиться к официальной документации PHP или к различным онлайн-ресурсам, таким как W3Schools, PHP.net или Stack Overflow.'
    );

    private const VARIABLES = array(
        'intro_phrases' => self::INTRO_PHRASES,
        'conclusion_phrases' => self::CONCLUSION_PHRASES,
        'topics' => self::TOPICS,
        'transitions' => self::TRANSLATIONS,
        'sentences' => self::SENTENCES
    );

    public function loadData(ObjectManager $manager): void
    {
        $this->createMany(SourceTexts::class,30, function (SourceTexts $sourceTexts) use ($manager) {
            $type = array_rand(self::VARIABLES, true);
            $array = self::VARIABLES[$type];
            $count = count($array) - 1;
            $sourceTexts
                ->setType($type)
                ->setData($array[$count])
            ;
        });

        $this->create(SourceTexts::class,function (SourceTexts $sourceTexts) use ($manager) {
            $sourceTexts
                ->setType('intro_phrases')
                ->setData(self::INTRO_PHRASES[array_rand(self::INTRO_PHRASES, true)])
            ;
        });

        $this->create(SourceTexts::class,function (SourceTexts $sourceTexts) use ($manager) {
            $sourceTexts
                ->setType('conclusion_phrases')
                ->setData(self::CONCLUSION_PHRASES[array_rand(self::CONCLUSION_PHRASES, true)])
            ;
        });

        $this->create(SourceTexts::class,function (SourceTexts $sourceTexts) use ($manager) {
            $sourceTexts
                ->setType('topics')
                ->setData(self::TOPICS[array_rand(self::TOPICS, true)])
            ;
        });

        $this->create(SourceTexts::class,function (SourceTexts $sourceTexts) use ($manager) {
            $sourceTexts
                ->setType('transitions')
                ->setData(self::TRANSLATIONS[array_rand(self::TRANSLATIONS, true)])
            ;
        });

        $this->create(SourceTexts::class,function (SourceTexts $sourceTexts) use ($manager) {
            $sourceTexts
                ->setType('sentences')
                ->setData(self::SENTENCES[array_rand(self::SENTENCES, true)])
            ;
        });
    }
}
